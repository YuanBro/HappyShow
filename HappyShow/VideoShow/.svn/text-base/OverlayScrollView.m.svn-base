//
//  OverlayScrollView.m
//  VideoShow
//
//  Created by Jerry Chen  on 14-10-29.
//  Copyright (c) 2014年 energy. All rights reserved.
//

#import "OverlayScrollView.h"
#import "qxTimeline.h"
#import "qxMediaObject+Util.h"

@implementation OverlayScrollView
{
    //0 : video track,  1 : music track,  2 : audio track,  3 : overlay track
    qxTimeline *timeline;
    VideoFrameView *frameView;//显示视频帧的轴
    SubtitleRectView *currentEditingSubtitleView;//当前编辑的矩形区域
    SubtitleRangeSlider *subtitleSlider;//编辑区域滑块
    
    NSMutableArray *subtitleViewArray;//字幕或者sticker数组
    
    BOOL fillRectWithSticker;
}

- (id)initWithFrame:(CGRect)frame contentSize:(CGSize)contSize timeline:(qxTimeline*)tl fillRectWithSticker:(BOOL)isSticker
{
    if(self = [super initWithFrame:frame]){
        timeline = tl;
        frameView = [[VideoFrameView alloc] initWithFrame:CGRectMake(0, 0, frame.size.width, 45) mediaArray:[timeline getTrackFromTimeline:0].mpMediaObjArray];
        frameView.delegate = self;
        frameView.contentSize = contSize;
        [self addSubview:frameView];
        fillRectWithSticker = isSticker;
    }
    return self;
}

/** 获取编辑中的对象 */
- (qxMediaObject *)getEditingMediaObject {
    for(SubtitleRectView *tmp in subtitleViewArray){
        if(tmp.editing){
            return tmp.mediaObject;
        }
    }
    
    return nil;
}

- (void)refreshSubtitleView
{
    [self fillSubtitleView];
}

- (void)hiddenEditingView
{
    [self showSliderWithSubtitleView:nil];
    for(SubtitleRectView *tmp in subtitleViewArray){
        tmp.editing = NO;
    }
}

- (void)scrollToSecond:(float)second sendEvent:(BOOL)flag
{
    [frameView scrollToSecond:second tapFlag:NO sendEvent:flag];
}

- (void)scrollToSecond:(float)second
{
    [frameView scrollToSecond:second tapFlag:NO sendEvent:YES];
}

#pragma mark - VideoFrameViewDelegate
- (void)videoFrameView:(VideoFrameView*)view didScrollTo:(CGFloat)second tapFlag:(BOOL)tapFlag
{
    if([self.delegate respondsToSelector:@selector(videoScrollView:didScrollTo:tapFlag:)]){
        [self.delegate videoScrollView:self didScrollTo:second tapFlag:tapFlag];
    }
}

- (void)videoFrameContentViewTapped
{
    [self hiddenEditingView];
}

- (void)videoFrameLoadDone
{
    [self fillSubtitleView];
    if([self.delegate respondsToSelector:@selector(framesLoadDone)]){
        [self.delegate framesLoadDone];
    }
}

- (void)videoFrameViewPanDidStart
{
    if([self.delegate respondsToSelector:@selector(scrubbingDidStart:)]){
        [self.delegate scrubbingDidStart:self];
    }
}

- (void)videoFrameViewPanDidEnd
{
    if([self.delegate respondsToSelector:@selector(scrubbingDidEnd:)]){
        [self.delegate scrubbingDidEnd:self];
    }
}

#pragma mark - SubtitleRangeSliderDelegate
//- (void)subtitleRangeSliderValueChange:(SubtitleRangeSlider *)slider
//{
//    if(currentEditingSubtitleView){
//        qxTrack *overlayTrack = [timeline getTrackFromTimeline:3];
//        int timeScale = [overlayTrack getMediaObjectFromTrack:(int)currentEditingSubtitleView.indexOnTrack].mediaOriginalDuration.timescale;
//        
//        Float64 start = (slider.frame.origin.x + [slider handlerWidth] - self.frame.size.width/2)/FrameWidthPerSecond;
//        Float64 duration = (slider.frame.size.width - [slider handlerWidth] * 2)/FrameWidthPerSecond;
//        [overlayTrack updateTimeAtIndex:(int)currentEditingSubtitleView.indexOnTrack startTime:CMTimeMakeWithSeconds(start, timeScale) duration:CMTimeMakeWithSeconds(duration, timeScale)];
//        currentEditingSubtitleView.frame = CGRectMake(slider.frame.origin.x + [slider handlerWidth], currentEditingSubtitleView.frame.origin.y, slider.frame.size.width - [slider handlerWidth] * 2, currentEditingSubtitleView.frame.size.height);
//        
//        if([self.delegate respondsToSelector:@selector(needRefreshVideo)]){
//            [self.delegate needRefreshVideo];
//        }
//    }
//}

- (void)subtitleRangeSliderValueChange:(SubtitleRangeSlider *)slider {
    
    if(currentEditingSubtitleView){
        qxTrack *overlayTrack = [timeline getTrackFromTimeline:3];
        int timeScale = [overlayTrack getMediaObjectFromTrack:(int)currentEditingSubtitleView.indexOnTrack].mediaOriginalDuration.timescale;
        
        Float64 start = (slider.frame.origin.x + [slider handlerWidth] - self.frame.size.width/2)/FrameWidthPerSecond;
        Float64 duration = (slider.frame.size.width - [slider handlerWidth] * 2)/FrameWidthPerSecond;
        [overlayTrack updateTimeAtIndex:(int)currentEditingSubtitleView.indexOnTrack startTime:CMTimeMakeWithSeconds(start, timeScale) duration:CMTimeMakeWithSeconds(duration, timeScale)];
        currentEditingSubtitleView.frame = CGRectMake(slider.frame.origin.x + [slider handlerWidth], currentEditingSubtitleView.frame.origin.y, slider.frame.size.width - [slider handlerWidth] * 2, currentEditingSubtitleView.frame.size.height);
        
        if([self.delegate respondsToSelector:@selector(needRefreshVideo)]){
            [self.delegate needRefreshVideo];
        }
        
        if([self.delegate respondsToSelector:@selector(videoScrollView:start:end:index:)]){
            [self.delegate videoScrollView:self start:start end:start + duration index:-1];
        }
    }
}

// 0 left  1 right   滑块左右滑动事件
- (void)subtitleRangeSlider:(SubtitleRangeSlider*)slider changeIndex:(NSUInteger)index {
    if(currentEditingSubtitleView){
        qxTrack *overlayTrack = [timeline getTrackFromTimeline:3];
        int timeScale = [overlayTrack getMediaObjectFromTrack:(int)currentEditingSubtitleView.indexOnTrack].mediaOriginalDuration.timescale;
        
        Float64 start = (slider.frame.origin.x + [slider handlerWidth] - self.frame.size.width/2)/FrameWidthPerSecond;
        Float64 duration = (slider.frame.size.width - [slider handlerWidth] * 2)/FrameWidthPerSecond;
        [overlayTrack updateTimeAtIndex:(int)currentEditingSubtitleView.indexOnTrack startTime:CMTimeMakeWithSeconds(start, timeScale) duration:CMTimeMakeWithSeconds(duration, timeScale)];
        currentEditingSubtitleView.frame = CGRectMake(slider.frame.origin.x + [slider handlerWidth], currentEditingSubtitleView.frame.origin.y, slider.frame.size.width - [slider handlerWidth] * 2, currentEditingSubtitleView.frame.size.height);
        
        if([self.delegate respondsToSelector:@selector(needRefreshVideo)]){
            [self.delegate needRefreshVideo];
        }
            
        if([self.delegate respondsToSelector:@selector(videoScrollView:start:end:index:)]){
            [self.delegate videoScrollView:self start:start end:start + duration index:index];
        }
    }
}

#pragma mark - SubtitleRectViewDelegate -- 点击矩形区域回调
- (void)subtitleRectViewTaped:(SubtitleRectView *)view touchPoint:(CGPoint)touchPoint
{
    [self updateSubtitleViewEditingStatus:view];
    [self showSliderWithSubtitleView:view];
    
    // 当前片段对应的时间
    CGFloat startSecond = [frameView startTimeOfContentView:view];
    [frameView scrollToSecond:startSecond tapFlag:YES sendEvent:YES];
    // 传出点击的区域
    
    if ([self.delegate respondsToSelector:@selector(videoScrollView:tapSubtitleRectView:didToSecond:)]) {
        [self.delegate videoScrollView:self tapSubtitleRectView:view didToSecond:startSecond];
    }

}

/** 根据对应的overlay对象 将其在时间轴中的位置设置为编辑状态 flag是否需要滚动 */
- (void)showEditingViewWithMediaObject:(qxMediaObject *)mediaObject scrollFlag:(BOOL)flag {
    
    SubtitleRectView *view = nil;
    for (SubtitleRectView *tmpRectView in subtitleViewArray) {
        if (tmpRectView.mediaObject == mediaObject) {
            
            view = tmpRectView;
            break;
        }
    }
    
    if (view == nil) {
        return;
    }
    
    [self updateSubtitleViewEditingStatus:view];
    [self showSliderWithSubtitleView:view];
    
    if (flag) {// 处理滚动
        // 当前片段对应的时间
        CGFloat startSecond = [frameView startTimeOfContentView:view];
        [frameView scrollToSecond:startSecond tapFlag:YES sendEvent:YES];
    }
}

#pragma mark - Private method
- (void)fillSubtitleView
{
    [self updateSubtitleRect];
    for(SubtitleRectView *view in subtitleViewArray){
        [frameView addContentView:view];
    }
}

//更新里面的sticker片段块
- (void)updateSubtitleRect
{
    if(!subtitleViewArray){
        subtitleViewArray = [[NSMutableArray alloc] init];
    }
    for(SubtitleRectView *view in subtitleViewArray){
        if(view){
            [view removeFromSuperview];
        }
    }
    [subtitleViewArray removeAllObjects];
    //----------------------字幕,sticker,动态sticker都是使用的字幕这个同一个通道
    NSMutableArray *overlayObjArray = [timeline getTrackFromTimeline:3].mpMediaObjArray;
    qxMediaObject *obj = nil;
    for(int i = 0; i < overlayObjArray.count; i++){
        obj = overlayObjArray[i];
        if((obj.eType == eMT_Overlay||obj.eType == eMT_OverlayDynamic) && ((fillRectWithSticker && [obj isStickerObj]) || (!fillRectWithSticker && [obj isTextObj]))){
            SubtitleRectView *subtitleView = [self newSubtitleRectViewWithMediaObj:obj indexOnTrack:i];
            subtitleView.mediaObject = obj;// 引用住它
            [subtitleViewArray addObject:subtitleView];
        }
    }
    [self sortSubtitleViewArray];
}

-(void)sortSubtitleViewArray
{
    NSArray *tmp = [subtitleViewArray sortedArrayUsingComparator:^(SubtitleRectView *v1, SubtitleRectView *v2){
        qxTrack *overlayTrack = [timeline getTrackFromTimeline:3];
        double d1 = CMTimeGetSeconds([overlayTrack getMediaObjectFromTrack:(int)v1.indexOnTrack].startTimeOfTrack);
        double d2 = CMTimeGetSeconds([overlayTrack getMediaObjectFromTrack:(int)v2.indexOnTrack].startTimeOfTrack);
        NSComparisonResult result = NSOrderedSame;
        if(d1 > d2){
            result = NSOrderedDescending;
        }else if(d1 < d2){
            result = NSOrderedAscending;
        }
        return result;
    }];
    [subtitleViewArray removeAllObjects];
    [subtitleViewArray addObjectsFromArray:tmp];
}

-(SubtitleRectView*)newSubtitleRectViewWithMediaObj:(qxMediaObject*)obj indexOnTrack:(NSUInteger)index
{
    SubtitleRectView *view = nil;
    CGRect rect = [self rectWithSubtitleStart:CMTimeGetSeconds(obj.startTimeOfTrack) duration:CMTimeGetSeconds(obj.mediaOriginalDuration)];
    if([obj isTextObj]){
        view = [[SubtitleRectView alloc] initWithFrame:rect Pending:(((qxMediaObject*)obj.overlayCustomObj).text == nil) IndexOnTrack:index];
    }else{
        view = [[SubtitleRectView alloc] initWithFrame:rect Pending:NO IndexOnTrack:index];
    }
    
    view.delegate = self;
    return view;
}

-(CGRect)rectWithSubtitleStart:(double)start  duration:(double)duration
{
    return CGRectMake(start * FrameWidthPerSecond + frameView.frame.size.width/2, 0, duration * FrameWidthPerSecond, frameView.frame.size.height);
}

- (void)updateSubtitleViewEditingStatus:(SubtitleRectView*)view
{
    if(!view.editing){
        view.editing = YES;
        for(SubtitleRectView *tmp in subtitleViewArray){
            if(![tmp isEqual:view]){
                tmp.editing = NO;
            }
        }
    }
}

- (void)showSliderWithSubtitleView:(SubtitleRectView*)view
{
    if(!view){
        if(subtitleSlider){
            [subtitleSlider removeFromSuperview];
        }
        currentEditingSubtitleView = nil;
        return;
    }
    
    //
    if(!subtitleSlider){
        subtitleSlider = [[SubtitleRangeSlider alloc] initWithFrame:CGRectMake(0, 0, 0, self.frame.size.height)];
        subtitleSlider.delegate = self;
    }
    if(!subtitleSlider.superview){
        [frameView addContentView:subtitleSlider];
    }
    CGRect availableRect = [self calSliderRectWithSubtitleView:view];
    
    [subtitleSlider showWithFrame:view.frame maxRect:availableRect];
    currentEditingSubtitleView = view;
    
    [frameView bringSubviewToFront:subtitleSlider];
}

// 查找对应区域的字幕段
- (SubtitleRectView*)subtitleAt:(CGFloat)x
{
    SubtitleRectView *subView;
    for(SubtitleRectView *view in subtitleViewArray){
        
        if(x >= view.frame.origin.x && x <= view.frame.origin.x + view.frame.size.width){
            subView = view;
            
            NSLog(@"tap rect===%@", NSStringFromCGRect(view.frame));
            break;
        }
    }
    return subView;
}

#pragma mark --- 计算出编辑区域可以拖动的最大范围
- (CGRect)calSliderRectWithSubtitleView:(SubtitleRectView*)view
{
//    NSUInteger index = [subtitleViewArray indexOfObject:view];
//    if(index != NSNotFound){
//        float x,w;
//        SubtitleRectView *tmpRectView;
//        if(index == 0){
//            x = self.frame.size.width/2;
//            if(subtitleViewArray.count == 1){
//                w = [frameView totalFramesWidth];
//            }else{
//                tmpRectView = (SubtitleRectView*)subtitleViewArray[1];
//                w = tmpRectView.frame.origin.x - self.frame.size.width/2;
//            }
//        }else if(index == subtitleViewArray.count -1){
//            tmpRectView = (SubtitleRectView*)subtitleViewArray[subtitleViewArray.count - 2];
//            x = tmpRectView.frame.origin.x + tmpRectView.frame.size.width;
//            w = [frameView totalFramesWidth] - (x - self.frame.size.width/2);
//        }else{
//            tmpRectView = (SubtitleRectView*)subtitleViewArray[index - 1];
//            x = tmpRectView.frame.origin.x + tmpRectView.frame.size.width;
//            tmpRectView = (SubtitleRectView*)subtitleViewArray[index + 1];
//            w = tmpRectView.frame.origin.x - x;
//        }
//        return CGRectMake(x, 0, w, self.frame.size.height);
//    }
    
    return CGRectMake(self.frame.size.width/2, 0, [frameView totalFramesWidth], self.frame.size.height);
    //return view.frame;
}
@end
