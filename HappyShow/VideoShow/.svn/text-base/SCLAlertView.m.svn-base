//
//  SCLAlertView.m
//  SCLAlertView
//
//  Created by Diogo Autilio on 9/26/14.
//  Copyright (c) 2014 AnyKey Entertainment. All rights reserved.
//

#import "SCLAlertView.h"
//#import "SCLAlertViewResponder.h"
#import "SCLButton.h"
#import <AVFoundation/AVFoundation.h>

#define UIColorFromRGB(rgbValue) [UIColor \
colorWithRed:((float)((rgbValue & 0xFF0000) >> 16))/255.0 \
green:((float)((rgbValue & 0xFF00) >> 8))/255.0 \
blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]

static float animTime = 0.3f;

@interface SCLAlertView ()

@property (nonatomic, strong) UIViewController *rootViewController;
@property (nonatomic, strong) NSMutableArray *buttons;
@property (nonatomic, strong) UIView *shadowView;
@property (nonatomic, strong) UIView *contentView;
@property (nonatomic, strong) UITapGestureRecognizer *gestureRecognizer;

@end

@implementation SCLAlertView

CGFloat kDefaultShadowOpacity;
CGFloat kContentMargin;
CGFloat kWindowWidth;
CGFloat kWindowHeight;
CGFloat kTitleHeight;
CGFloat kTextHeight;
CGFloat kFrameHeight;
// Font
NSString *kDefaultFont = @"HelveticaNeue";
NSString *kButtonFont = @"HelveticaNeue-Bold";

// Timer
NSTimer *durationTimer;

#pragma mark - Initialization

- (id)initWithCoder:(NSCoder *)aDecoder
{
    @throw [NSException exceptionWithName:NSInternalInconsistencyException
                                   reason:@"NSCoding not supported"
                                 userInfo:nil];
}

- (id)init
{
    self = [super init];
    if (self)
    {
        // Default values
        kDefaultShadowOpacity = 0.7f;
        kContentMargin=12.0f;
        kTitleHeight=24.0f;
        kFrameHeight = 45.0f;
        kTextHeight = 90.0f;
        kWindowWidth = 240.0f;
        kWindowHeight = 178.0f;
        _shouldDismissOnTapOutside = NO;
        
        // Init
        _labelTitle = [[UILabel alloc] init];
        _viewText = [[UITextView alloc] init];
        _shadowView = [[UIView alloc] init];
        _contentView = [[UIView alloc] init];
        _buttons = [[NSMutableArray alloc] init];
        
		// Add Subvies
        [self.view addSubview:_contentView];
        
        [_contentView addSubview:_labelTitle];
        [_contentView addSubview:_viewText];
        
		// Content View
        _contentView.layer.cornerRadius = 5.0f;
        _contentView.layer.masksToBounds = YES;
        _contentView.layer.borderWidth = 0.5f;
        
        // Title
        _labelTitle.numberOfLines = 1;
        _labelTitle.textAlignment = NSTextAlignmentCenter;
        _labelTitle.font = [UIFont fontWithName:kDefaultFont size:20.0f];
        
        // View text
        _viewText.editable = NO;
        _viewText.allowsEditingTextAttributes = YES;
        _viewText.textAlignment = NSTextAlignmentLeft;
        _viewText.font = [UIFont fontWithName:kDefaultFont size:14.0f];
        
        // Shadow View
        self.shadowView = [[UIView alloc] initWithFrame:CGRectMake(0.0f, 0.0f, [UIScreen mainScreen].bounds.size.width, [UIScreen mainScreen].bounds.size.height)];
        self.shadowView.autoresizingMask = UIViewAutoresizingFlexibleHeight | UIViewAutoresizingFlexibleWidth;
        self.shadowView.backgroundColor = [UIColor blackColor];
        
        // Colors
        _contentView.backgroundColor = [UIColor whiteColor];
        _labelTitle.textColor = UIColorFromRGB(0x4D4D4D);
        _viewText.textColor = UIColorFromRGB(0x4D4D4D);
        _contentView.layer.borderColor = UIColorFromRGB(0xCCCCCC).CGColor;
    }
    return self;
}

#pragma mark - View Cycle
// 这里开始绘制视图--这里开始调整布局位置
-(void)viewWillLayoutSubviews
{
    [super viewWillLayoutSubviews];
    
    CGSize sz = [UIScreen mainScreen].bounds.size;
    
    NSString *systemVersion = [[UIDevice currentDevice] systemVersion];
    if ([systemVersion floatValue] < 8.0f)
    {
        // iOS versions before 7.0 did not switch the width and height on device roration
        if (UIInterfaceOrientationIsLandscape([[UIApplication sharedApplication] statusBarOrientation]))
        {
            CGSize ssz = sz;
            sz = CGSizeMake(ssz.height, ssz.width);
        }
    }
    CGRect newFrame = self.shadowView.frame;
    newFrame.size = sz;
    self.shadowView.frame = newFrame;

    _labelTitle.frame = CGRectMake(kContentMargin, kContentMargin, kWindowWidth - kContentMargin*2, kTitleHeight);
    _viewText.frame = CGRectMake(kContentMargin, _labelTitle.frame.origin.y+_labelTitle.frame.size.height, kWindowWidth - kContentMargin*2, kTextHeight);
    
    CGFloat y = _viewText.frame.origin.y+_viewText.frame.size.height;
    // Buttons
    for (UIButton *btn in _buttons)
    {
        btn.frame = CGRectMake(kContentMargin, y, kWindowWidth - kContentMargin*2, 35.0f);
        btn.layer.cornerRadius = 3;
        y += kFrameHeight;
    }
    
    //_labelTitle.backgroundColor=[UIColor redColor];
    
    kWindowHeight = _viewText.frame.origin.y+_viewText.frame.size.height+kFrameHeight*_buttons.count;
    
    self.view.frame = CGRectMake(0, 0, kWindowWidth, kWindowHeight);
    _contentView.frame = CGRectMake(0, 0, kWindowWidth, kWindowHeight);
    
    [self calCenter];
}

#pragma mark - Handle gesture

- (void)handleTap:(UITapGestureRecognizer *)gesture
{
    if (_shouldDismissOnTapOutside)
    {
        [self hideView];
    }
}

- (void)setShouldDismissOnTapOutside:(BOOL)shouldDismissOnTapOutside
{
    _shouldDismissOnTapOutside = shouldDismissOnTapOutside;
    
    if(_shouldDismissOnTapOutside)
    {
        self.gestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleTap:)];
        [self.shadowView addGestureRecognizer:_gestureRecognizer];
    }
}

#pragma mark - Buttons

- (SCLButton *)addButton:(NSString *)title
{
    // Update view height
    kWindowHeight += kFrameHeight;
    
    // Add button
    SCLButton *btn = [[SCLButton alloc] init];
    btn.layer.masksToBounds = YES;
    [btn setTitle:title forState:UIControlStateNormal];
    btn.titleLabel.font = [UIFont fontWithName:kButtonFont size:14.0f];

    [_contentView addSubview:btn];
    [_buttons addObject:btn];
    
    return btn;
}

- (SCLButton *)addButton:(NSString *)title actionBlock:(ActionBlock)action
{
    SCLButton *btn = [self addButton:title];
    btn.actionType = Block;
    btn.actionBlock = action;
    [btn addTarget:self action:@selector(buttonTapped:) forControlEvents:UIControlEventTouchUpInside];

    return btn;
}

- (SCLButton *)addButton:(NSString *)title target:(id)target selector:(SEL)selector
{
    SCLButton *btn = [self addButton:title];
    btn.actionType = Selector;
    btn.target = target;
    btn.selector = selector;
    [btn addTarget:self action:@selector(buttonTapped:) forControlEvents:UIControlEventTouchUpInside];
    
    return btn;
}

- (void)buttonTapped:(SCLButton *)btn
{
    if (btn.actionType == Block)
    {
        if (btn.actionBlock)
            btn.actionBlock();
    } else if (btn.actionType == Selector) {
        UIControl *ctrl = [[UIControl alloc] init];
        [ctrl sendAction:btn.selector to:btn.target forEvent:nil];
    } else {
        NSLog(@"Unknown action type for button");
    }
    [self hideView];
}

#pragma mark - Show Alert

-(void)showTitle:(UIViewController *)control title:(NSString *)title subTitle:(NSString *)subTitle duration:(NSTimeInterval)duration completeText:(NSString *)completeText
{
    if (control==nil) {
        return;
    }
    self.view.alpha = 0.5;
    self.shadowView.alpha = kDefaultShadowOpacity;
    self.rootViewController = control;
    
    // Add subviews
    [self.rootViewController addChildViewController:self];
    self.shadowView.frame = control.view.bounds;
    [self.rootViewController.view addSubview:self.shadowView];
    [self.rootViewController.view addSubview:self.view];

    // Title
    if([title stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]].length > 0)
    {
        self.labelTitle.text = title;
    }

    // Subtitle---此处计算文本实际需要的高度
    if([subTitle stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]].length > 0)
    {
        // No custom text
        if (_attributedFormatBlock == nil)
        {
            _viewText.text = subTitle;
        } else {
            _viewText.attributedText = self.attributedFormatBlock(subTitle);
        }
        
        // Adjust text view size, if necessary
        NSString *str = subTitle;
        CGSize sz = CGSizeMake(kWindowWidth - kContentMargin*2, 90.0f);
        NSDictionary *attr = @{NSFontAttributeName:self.viewText.font};
        CGRect r = [str boundingRectWithSize:sz options:NSStringDrawingUsesLineFragmentOrigin attributes:attr context:nil];
        CGFloat ht = ceil(r.size.height) + 20;
        if (ht < kTextHeight)
        {
            kTextHeight = ht;
        }
    }

    // Add button, if necessary
    if(completeText != nil)
    {
        [self addButton:completeText target:self selector:@selector(hideView)];
    }
    
    for (SCLButton *btn in _buttons)
    {
        btn.backgroundColor = [UIColor colorWithRed:221/255.0 green:107/255.0 blue:111/255.0 alpha:1.0];
    }
    
    // Adding duration
    if (duration > 0)
    {
        [durationTimer invalidate];
        durationTimer = [NSTimer scheduledTimerWithTimeInterval:duration
                                                          target:self
                                                        selector:@selector(hideView)
                                                        userInfo:nil
                                                         repeats:NO];
    }

    
    // Animate in the alert view
    [UIView animateWithDuration:animTime animations:^{
        self.shadowView.alpha = kDefaultShadowOpacity;
        self.view.alpha = 1.0f;
        //[self calCenter];
    } completion:^(BOOL completed) {
        [UIView animateWithDuration:animTime animations:^{
            [self calCenter];
        }];
    }];

}

-(void) calCenter
{
    CGPoint point = CGPointMake(0, 0);
    
    if (self.rootViewController.view.superview!=nil) {
        point = CGPointMake(self.self.rootViewController.view.superview.center.x, self.self.rootViewController.view.superview.center.y-64.0);
    }else{
        point = CGPointMake(self.rootViewController.view.center.x, self.rootViewController.view.center.y);
    }
    self.view.center = point;
}

- (void)showTitle:(UIViewController *)vc title:(NSString *)title subTitle:(NSString *)subTitle closeButtonTitle:(NSString *)closeButtonTitle duration:(NSTimeInterval)duration
{
    [self showTitle:vc title:title subTitle:subTitle duration:duration completeText:closeButtonTitle];
}

#pragma mark - Hide Alert

// Close SCLAlertView
- (void)hideView
{
    [UIView animateWithDuration:animTime animations:^{
        self.shadowView.alpha = 0.5;
        self.view.alpha = 0.5;
    } completion:^(BOOL completed) {
        if(completed)
        {
            [self.shadowView removeFromSuperview];
            [self.view removeFromSuperview];
            [self removeFromParentViewController];
        }
    }];
}

@end
