//
//  StickerDownloadViewController.m
//  VideoShow
//
//  Created by Jerry Chen  on 14/12/8.
//  Copyright (c) 2014年 energy. All rights reserved.
//

#import "StickerDownloadViewController.h"
#import "Util.h"
#import "JSONKit.h"
#import "StickerDownloader.h"
#import "UIImageView+WebCache.h"
#import "DownloadedSticker+CoreData.h"
#import "DownloadingSticker+CoreData.h"
#import "Toast+UIView.h"
#import "StickerManagementController.h"
#import "StickerDetailViewController.h"
#import "RotateNavigationController.h"
#import "DownloadingSticker.h"
#import "MaterialInf.h"
#import "BaseService.h"
#import "UIImage+Util.h"
#import "MJRefresh.h"
#import "UIColor+Util.h"
#import "StickerAccessCell.h"
#import "UITabBar+Badge.h"
#import "AppMacros.h"

//#import "SouceTrackCell.h"
static NSString *cellIdentifier = @"StickerAccessCell";

@interface StickerDownloadViewController()<StickerDownloaderDelegate>
{
    UIView *netErrorView;
    
    NSArray *predownloadList;
    NSString *resourceRootUrl;//素材的访问地址
}

@property (nonatomic,assign) int pageIndex;
@property (nonatomic,strong) NSMutableArray *mMaterials;//提供下载的素材列表

@end

@implementation StickerDownloadViewController

@synthesize disableBack;
@synthesize mMaterials;

- (id)initWithStyle:(UITableViewStyle)style
{
    if(self = [super initWithStyle:style]){
        
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
         //设置tabar
    [self.tabBarController.tabBar removeBadgeOnItemIndex:0];
    self.view.backgroundColor = [UIColor colorWithHexString:tableSectionColor];
    mMaterials=[NSMutableArray array];
    
    [self.navigationController.navigationBar initWithViewController:self title:NSLocalizedString(@"Sticker", nil)];
    
    if (disableBack==NO)
        //允许显示返回
    {
        [self.navigationController.navigationBar initWithViewController:self leftImageName:@"ic_back_arrow.png" action:@selector(backTap:)];
    }
    [self.navigationController.navigationBar initWithViewController:self rightImageName:@"bt_setting_normal.png" action:@selector(settingButtonAction:)];
    UINib *cellNib = [UINib nibWithNibName:cellIdentifier bundle:nil];
    [self.tableView registerNib:cellNib forCellReuseIdentifier:cellIdentifier];    self.tableView.separatorColor = [UIColor colorWithHexString:@"#c8c7cc"];
    //request server
    [self setupRefresh];
}

- (void)dealloc {
    
}

/**
 *  集成刷新控件
 */
- (void)setupRefresh
{
    __weak StickerDownloadViewController * weakSelf = self;
    [self.tableView addHeaderWithCallback:^{
        weakSelf.pageIndex = 1;
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            NSArray * results;
            switch (weakSelf.materialType)
            {
                case MaterialTypeSoundtrack:
                    results = [weakSelf requestPostWithPageIndex : 1];
                    break;
                case MaterialTypeSticker:
                    {
                        results = [weakSelf requestWithPageIndex:1]
                        ;

                    }
                    break;
                    
                default:
                    break;
            }
//            NSArray * results = [weakSelf requestWithPageIndex:1];
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                if (results!=nil && results.count>0) {
                    [weakSelf.mMaterials removeAllObjects];
                    [weakSelf.mMaterials addObjectsFromArray:results];
                    [weakSelf.tableView reloadData];
                    [StickerDownloader sharedInstance].originalDataList=weakSelf.mMaterials;
                }
                
                [weakSelf.tableView headerEndRefreshing];
            });
            
        });
        
    }];
    [self.tableView addFooterWithCallback:^{
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            
            NSArray * results;
            switch (weakSelf.materialType)
            {
                case MaterialTypeSoundtrack:
                    
                    break;
                case MaterialTypeSticker:
                {
                    results =  [weakSelf requestWithPageIndex:++weakSelf.pageIndex];
                }
                    break;
                    
                default:
                    break;
            }

            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                if (results!=nil && results.count>0) {
                    [weakSelf.mMaterials addObjectsFromArray:results];
                    [weakSelf.tableView reloadData];
                    [StickerDownloader sharedInstance].originalDataList=weakSelf.mMaterials;
                }
                
                [weakSelf.tableView footerEndRefreshing];
            });
        });
        
    }];
    self.tableView.headerPullToRefreshText = NSLocalizedString(@"header_pull_refresh", nil);
    self.tableView.headerReleaseToRefreshText = NSLocalizedString(@"header_release_refresh", nil);
    self.tableView.headerRefreshingText = NSLocalizedString(@"load_refreshing", nil);
    
    self.tableView.footerPullToRefreshText = NSLocalizedString(@"footer_pull_refresh", nil);
    self.tableView.footerReleaseToRefreshText = NSLocalizedString(@"footer_release_refresh", nil);
    self.tableView.footerRefreshingText = NSLocalizedString(@"load_refreshing", nil);
    [self.tableView headerBeginRefreshing];
}

- (void)showNetErrorView
{
    if(!netErrorView){
        netErrorView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height)];
        netErrorView.backgroundColor = [UIColor whiteColor];
        UIImageView *imageView = [[UIImageView alloc] initWithFrame:CGRectMake((netErrorView.frame.size.width - 80)/2, 120, 80, 80)];
        imageView.image = [UIImage imageResource:@"ic_network_wifi.png"];
        [netErrorView addSubview:imageView];
        //
        UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake((netErrorView.frame.size.width - 200)/2, imageView.frame.origin.y + imageView.frame.size.height + 5, 200, 30)];
        label.textColor = [UIColor grayColor];
        label.textAlignment = NSTextAlignmentCenter;
        label.text = NSLocalizedString(@"Request Failed And Network Error", nil);
        [label sizeToFit];
        [netErrorView addSubview:label];
        //
        UIButton *button = [[UIButton alloc] initWithFrame:CGRectMake((netErrorView.frame.size.width - 120)/2, label.frame.origin.y + label.frame.size.height + 20, 120, 45)];
        button.backgroundColor = [UIColor grayColor];
        [button setTitle:NSLocalizedString(@"Reload", nil) forState:UIControlStateNormal];
        [button addTarget:self action:@selector(reloadAction:) forControlEvents:UIControlEventTouchUpInside];
        [button setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [netErrorView addSubview:button];
        [self.view addSubview:netErrorView];
    }
    netErrorView.hidden = NO;
    [self.view bringSubviewToFront:netErrorView];
}

- (BOOL)shouldAutorotate
{
    return NO;
}

- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation
{
    return UIInterfaceOrientationPortrait;
}

- (UIInterfaceOrientationMask)supportedInterfaceOrientations
{
    return UIInterfaceOrientationMaskPortrait;
}

- (void)hideNetErrorView
{
    netErrorView.hidden = YES;
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [StickerDownloader sharedInstance].delegate = self;
    //query local data
    predownloadList = [DownloadingSticker queryAll];
    [self.tableView reloadSections:[NSIndexSet indexSetWithIndex:0] withRowAnimation:UITableViewRowAnimationFade];
    
}

-(void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    if ([self.mainDelegate respondsToSelector:@selector(controllerDidAppear:)])
    {
        [self.mainDelegate controllerDidAppear:self];
    }
    
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    if ([self.mainDelegate respondsToSelector:@selector(controllerDidDisappear:)])
    {
        [self.mainDelegate controllerDidDisappear:self];
    }
}

- (void)reloadAction:(id)sender
{
    [self hideNetErrorView];
    [self.tableView headerBeginRefreshing];
}

- (void)backTap:(id)sender
{
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)settingButtonAction:(id)sender
{
    StickerManagementController *controller = [[StickerManagementController alloc] initWithStyle:UITableViewStylePlain];
    RotateNavigationController *nav = [[RotateNavigationController alloc] initWithRootViewController:controller];
    [self presentViewController:nav animated:YES completion:nil];
}

- (int)checkStickerStatus:(int)materialID version:(int)version
{
    DownloadedSticker * tmpSticker=[DownloadedSticker queryByMaterialID:materialID];
    int res = 0;//download
    if(tmpSticker.material_id.intValue == materialID){//先判断是否已经下载过
        if(tmpSticker.version_code.intValue < version){
            res = 1;//update
        }else{
            res = 2;//finished
        }
    }
    
    if(res == 0){//判断是否处于下载中
        if(predownloadList && predownloadList.count > 0){
            for(DownloadingSticker *tmp in predownloadList){
                if(tmp.material_id.integerValue == materialID){
                    res = 3;//downloading
                    break;
                }
            }
        }
    }
    return res;
}

#pragma mark - UITableViewDataSource
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return mMaterials.count;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    
    return 1;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return 70.0;
}

- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath
{
//    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) {
//        [cell setSeparatorInset:UIEdgeInsetsZero];
//    }
//    if ([cell respondsToSelector:@selector(setPreservesSuperviewLayoutMargins:)]) {
//        [cell setPreservesSuperviewLayoutMargins:NO];
//    }
//    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {
//        [cell setLayoutMargins:UIEdgeInsetsZero];
//    }
}


- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    
    MaterialInf * inf = (MaterialInf*)mMaterials[indexPath.row];
    StickerAccessCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];
    inf.status = [self checkStickerStatus:inf.id version:inf.ver_code];
    cell.titleLabel.text = inf.material_name;
    cell.detailLabel.text =inf.material_paper;
    cell.materialID = inf.id;
    cell.materialInf=inf;
    
    if(inf.is_new==NO)
    {
        
    cell.statusIcon.hidden = YES;
        
    }
    else
    {
    
    cell.statusIcon.hidden = NO;
        
    }

    [cell.stickerIcon setImageWithURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@%@",resourceRootUrl, inf.material_icon]] placeholderImage:[UIImage imageResource:@"default_gray.png"]];
    
    cell.status = inf.status;
    switch (cell.status) {
        case 1://update
            cell.finishedStatus.selected = NO;
            break;
        case 2://finished
            cell.finishedStatus.selected = YES;
            break;
        default:
            cell.finishedStatus.selected = NO;
            break;
    }
    return cell;
}

#pragma mark - UITableViewDelegate
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    MaterialInf * inf = mMaterials[indexPath.row];
    inf.is_new=NO;
    inf.status = [self checkStickerStatus:inf.id version:inf.ver_code];
    StickerDetailViewController *detailControl = [[StickerDetailViewController alloc] init];
    detailControl.resource_url=resourceRootUrl;
    detailControl.materialInf = inf;
    detailControl.hidesBottomBarWhenPushed=YES;
    [self.navigationController pushViewController:detailControl animated:YES];
}

-(NSMutableArray *) requestWithPageIndex:(int)index
{
    NSString *lan = [Util currentLanguageIszhCN] ? @"zh-CN" : @"en-US";
    NSString * base_url = [BaseService prefixUrl:ServiceTypeSticker];
    int count=10;
    if (isPad)
    {
        count=20;
    }
    NSString *url = [NSString stringWithFormat:@"%@/videoshow/api/v2/config?type=getMaterialList&page=%d&item=%d&lang=%@&osType=2&materialType=1",base_url,index,count,lan];
    NSString * result = [BaseService callHttpSync:url];
    if (result==nil || [result isEqualToString:@""])
    {
        return nil;
    }
    
    NSDictionary *dict = [result objectFromJSONString];
    if(dict && [dict[@"err_info"] isEqualToString:@"success"])
    {
        resourceRootUrl = dict[@"resource_url"];
        NSArray * jsonArr = dict[@"materiallist"];
        return [MaterialInf initFromArr:jsonArr];
    }else{
        return nil;
    }
    
    return nil;
}

-(NSMutableArray *) requestPostWithPageIndex:(int)index
{
    NSString *lan = [Util currentLanguageIszhCN] ? @"zh-CN" : @"en-US";
    //    NSString * base_url = [BaseService prefixUrl:ServiceTypeSticker];
    int count=10;
    if (isPad) {
        count=20;
    }
    NSString *url = @"http://tsso.videoshowapp.com:88/zone/1.0.1/musicClient/getMusicTypeList.htm?osType=2";
    NSMutableDictionary * dic = [[NSMutableDictionary alloc]init];
    [dic setValue:0 forKey:@"startId"];
    [dic setValue:lan forKey:@"lang"];
    [dic setValue:@"1.9.5" forKey:@"versionName"];
    //    [dic setValue:@"1" forKey:@"isNotDes"];
    NSString *requestId = [NSString stringWithFormat:@"%f%u",[[NSDate date]timeIntervalSince1970] *1000,arc4random() % 1000];
    ;
    [dic setValue: requestId forKey:@"requestId"];
    NSString * result = [BaseService doPostRequestcUrl:url dict:dic];
    if (result==nil || [result isEqualToString:@""]) {
        return nil;
    }
    
    NSDictionary *dict = [result objectFromJSONString];
    if(dict && [dict[@"retMsg"] isEqualToString:@"success"]){
        //        resourceRootUrl = dict[@"resource_url"];
        NSArray * jsonArr = dict[@"musicTypelist"];
        return [MaterialInf initFromArr:jsonArr];
    }else{
        return nil;
    }
    
    return nil;
}


- (void)stickerFailDownload:(int)stickerID
{
    [self.view makeToast:NSLocalizedString(@"Download Fail", nil) duration:1.5 position:@"bottom"];
    predownloadList = [DownloadingSticker queryAll];
    [self.tableView reloadData];
}

- (void)stickerFinishDownload:(int)stickerID
{
    predownloadList = [DownloadingSticker queryAll];
    [self.tableView reloadData];
}

- (void)stickerStartDownload:(int)stickerID
{
    [self updateCurrentDownloadingCell:stickerID];
}


- (void)updateCurrentDownloadingCell:(int)stickerID
{
    for(int i = 0; i < mMaterials.count; i++){
        MaterialInf * inf = mMaterials[i];
        if(inf.id == stickerID)
        {
            [self.tableView reloadRowsAtIndexPaths:@[[NSIndexPath indexPathForItem:i inSection:0]] withRowAnimation:UITableViewRowAnimationFade];
            
            break;
        }
    }
}

@end
