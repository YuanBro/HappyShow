//
//  SubtitleTextView.m
//  VideoShow
//
//  Created by Jerry Chen  on 14-8-11.
//  Copyright (c) 2014年 energy. All rights reserved.
//

#import "SubtitleTextView.h"
#import "qxMediaObject.h"
#import "MyLabel.h"
#include "math.h"
#import "qxMediaObject+Util.h"
#import "UIImage+Util.h"

typedef NS_ENUM(NSUInteger, TouchMode){
    NONE=0,
    DRAG,
    ROTATE
};

//内部注册三种事件,点击控制,字体,触摸缩放事件,界面中整体注册平移事件
@interface SubtitleTextView()
{
    CGPoint oldPoint;//按下时的点位置
    CGPoint midPoint;//记录中心点
    float oldRotatef;//当前触点与中心的转角
}

@property (nonatomic,assign) CGPoint oldPoint;//上次触摸点

@end

//控制字体按钮的size大小
static int controlSize=24;

@implementation SubtitleTextView
{
    MyLabel *textLabel;
    UIView *foreground;
    UIImageView *delControl;
    UIImageView *scaleView;
    CGRect scaleArea;
}


@synthesize oldPoint;

- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.backgroundColor = [UIColor clearColor];
    }
    return self;
}

//这里似乎应该自动适应字幕的大小
- (void)layoutSubviews
{
    CGRect rect = self.frame;
    if(!textLabel){
        textLabel = [[MyLabel alloc] initWithFrame:CGRectMake(controlSize/2,controlSize/2, rect.size.width - controlSize, rect.size.height - controlSize)];
        textLabel.enableInset = YES;
        textLabel.insets = UIEdgeInsetsMake(0, 5, 0, 0);
        textLabel.layer.borderWidth = 1;
        textLabel.layer.borderColor = [[UIColor whiteColor] CGColor];
        textLabel.backgroundColor = [UIColor clearColor];
        textLabel.autoresizingMask = (UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight);
        textLabel.adjustsFontSizeToFitWidth = YES;
        textLabel.numberOfLines = 0;//many lines
        textLabel.lineBreakMode = NSLineBreakByClipping;
        textLabel.textAlignment = NSTextAlignmentLeft;
        textLabel.font = [UIFont systemFontOfSize:20];
        textLabel.textColor = [UIColor whiteColor];
        [self addSubview:textLabel];
    }
    if(!foreground){
        foreground = [[UIView alloc] initWithFrame:textLabel.frame];
        foreground.backgroundColor = [UIColor clearColor];
        foreground.autoresizingMask = (UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight);
        foreground.userInteractionEnabled = YES;
        [self addSubview:foreground];
        UITapGestureRecognizer *tapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleSubtitleViewForegroundTap:)];
        [foreground addGestureRecognizer:tapGestureRecognizer];
    }
    if(!delControl){
        delControl = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, controlSize, controlSize)];
        delControl.image = [UIImage imageResource:@"bt_clip_delete.png"];
        delControl.userInteractionEnabled = YES;
        UITapGestureRecognizer *tapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleDeleteTap:)];
        [delControl addGestureRecognizer:tapGestureRecognizer];
        [self addSubview:delControl];
    }
    
    if(!scaleView){
        scaleView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, controlSize, controlSize)];
        scaleView.image = [UIImage imageResource:@"subtitle_scale.png"];
        scaleView.userInteractionEnabled = YES;
        UIPanGestureRecognizer *panGestureRecognizer = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handlePanGesture:)];
        [scaleView addGestureRecognizer:panGestureRecognizer];
        [self addSubview:scaleView];
    }
    
    delControl.center = CGPointMake(textLabel.frame.origin.x, textLabel.frame.origin.y);
    scaleView.center = CGPointMake(textLabel.frame.size.width + controlSize/2, textLabel.frame.size.height + controlSize/2);
    //textLabel.center=self.center;
    scaleArea = self.superview.frame;//记录初始矩形区域
}

- (void)handleDeleteTap:(UITapGestureRecognizer *)recognizer {
    if ([self.delegate respondsToSelector:@selector(subtitleTextViewDelete:)]) {
        [self.delegate subtitleTextViewDelete:self];
    }
}

- (void)handlePositionViewTap:(UITapGestureRecognizer*)gesture
{
    if([self.delegate respondsToSelector:@selector(subtitlePositionViewTapped)]){
        [self.delegate subtitlePositionViewTapped];
    }
}

//处理触摸缩放事件
-(void)handlePanGesture:(UIPanGestureRecognizer*)gesture
{
    
    switch (gesture.state) {
        case UIGestureRecognizerStateBegan://按下
        {
            oldPoint=[gesture locationInView:gesture.view.superview.superview];
            midPoint=gesture.view.superview.center;
            oldRotatef=[self calRotatef:oldPoint withPoint:midPoint];
        }
            break;
        case UIGestureRecognizerStateChanged://平移
        {
            midPoint=gesture.view.superview.center;
            CGPoint eventp=[gesture locationInView:gesture.view.superview.superview];
            //计算当前转角
            float curRotatef=[self calRotatef:eventp withPoint:midPoint];
            float rotatefOffset=curRotatef-oldRotatef;
            float oldDist=[self calSpacing:oldPoint withPoint:midPoint];
            float newDist=[self calSpacing:eventp withPoint:midPoint];
            float scaleRate=newDist/oldDist;//计算缩放比例
            if(textLabel.text == nil || [textLabel.text isEqualToString:@""]){//控制缩放
                CGPoint translation = [gesture translationInView:gesture.view.superview];
                CGRect rect = self.frame;
                rect.size.width += translation.x;
                rect.size.height += translation.y;
                rect.size.width = fminf(rect.size.width, scaleArea.size.width - rect.origin.x);
                rect.size.height = fminf(rect.size.height, scaleArea.size.height - rect.origin.y);
                self.frame = rect;
                [self setNeedsLayout];
            }else{
                CGFloat size = textLabel.font.pointSize*scaleRate;
                textLabel.font =[UIFont fontWithName:textLabel.font.familyName size:size];
                [self updateTextRectByFont:rotatefOffset];
            }
            oldPoint=eventp;
            midPoint=gesture.view.superview.center;
        }
            break;
        case UIGestureRecognizerStateEnded://松开
        {
            oldPoint=CGPointMake(0.0f, 0.0f);//松手之后重置按下的点
            if([self.delegate respondsToSelector:@selector(subtitleTextSizeChanged:)]){
                [self.delegate subtitleTextSizeChanged:textLabel.font];
            }
        }
            break;
        case UIGestureRecognizerStateCancelled:
        {
        }
            break;
        default:
            break;
    }
}

//计算旋转弧度
-(float) calRotatef:(CGPoint)eventp withPoint:(CGPoint)midp
{
    double xdf=eventp.x-midp.x;
    double ydf=eventp.y-midp.y;
    //计算出弧度
    float radians=atan2f(ydf, xdf);
    
    //float degree=radians*180/M_PI;
    return radians;
}

//计算两点间的距离
-(float) calSpacing:(CGPoint)eventp withPoint:(CGPoint)midp
{
    float s2=(eventp.x-midp.x)*(eventp.x-midp.x)+(eventp.y-midp.y)*(eventp.y-midp.y);
    return sqrtf(s2);
}

//是否可缩放
- (BOOL)scaleAvailable
{
    return self.frame.size.width < scaleArea.size.width && self.frame.size.height < scaleArea.size.height;
}

- (void)triggerSubtitleViewTapped
{
    textLabel.text = nil;
    self.hidden = YES;
    if([self.delegate respondsToSelector:@selector(subtitleTextViewTapped)]){
        [self.delegate subtitleTextViewTapped];
    }
}

- (void)handleSubtitleViewForegroundTap:(UITapGestureRecognizer*)gesture
{
    self.hidden = YES;
    if([self.delegate respondsToSelector:@selector(subtitleTextViewModify)]){
        [self.delegate subtitleTextViewModify];
    }
    
}

-(void)updateTextRectByFont:(float)rotatef
{
    if(textLabel.text != nil && ![textLabel.text isEqualToString:@""]){
        CGSize tmpSize=[textLabel.text sizeWithAttributes:@{NSFontAttributeName:textLabel.font}];
        CGRect rect=self.frame;
        rect.size=CGSizeMake(tmpSize.width+controlSize, tmpSize.height+controlSize);
        self.frame=rect;
        self.center=midPoint;
        [self setNeedsLayout];
        if (rotatef!=0.0f) {
            //CGAffineTransform transform = CGAffineTransformMakeRotation(rotatef);
            //self.transform=transform;
            //self.transform = CGAffineTransformIdentity;
        }
    }
}

- (void)setTextWithOverlayObj:(qxMediaObject*)overlayObj
{
    if(overlayObj && [overlayObj isTextObj]){
        if(!textLabel){
            [self layoutIfNeeded];
        }
        qxMediaObject *textObj = overlayObj.overlayCustomObj;
        textLabel.text = textObj.text;
        textLabel.font = textObj.textFont;
        textLabel.textColor = textObj.textColor;
        [self updateTextRectByFont:0.0f];
    }else{
        textLabel.text = nil;
    }
}

-(void)updateText:(NSString*)text
{
    if(text != nil && ![text isEqualToString:@""]){
        self.hidden = NO;
        textLabel.text = text;
        [self updateTextRectByFont:0.0f];
    }
}

- (NSString*)text
{
    return  textLabel.text;
}

- (void)setTextColor:(UIColor*)color
{
    textLabel.textColor = color;
}

- (UIFont*)setTextFont:(NSString*)fontName
{
    UIFont *font = nil;
    if([fontName isEqualToString:@"default"]){
        font = [UIFont systemFontOfSize:textLabel.font.pointSize];
    }else{
        font = [UIFont fontWithName:fontName size:textLabel.font.pointSize];
    }
    if(font){
        textLabel.font = font;
    }
    //根据字体来判断字幕需要多大的空间
    NSString * text=textLabel.text;
    if ([text isEqualToString:@""]==YES) {
        return font;
    }
    NSDictionary *textAttrs = [NSDictionary dictionaryWithObject:font forKey:NSFontAttributeName];
    CGSize size=[text sizeWithAttributes:textAttrs];
    self.frame = CGRectMake(self.frame.origin.x, self.frame.origin.y, size.width+controlSize, size.height+controlSize);
    [self setNeedsLayout];
    return font;
}

- (void)resetTextSize
{
    textLabel.font = [UIFont fontWithName:textLabel.font.fontName size:20];
}

//返回字幕区域---不能直接减控制按钮
- (CGRect)subtitleRect
{
    CGRect rect = self.frame;
    rect.origin.x += controlSize/2;
    rect.origin.y += controlSize/2;
    NSString * text=textLabel.text;
    UIFont * font = textLabel.font;//计算出文字大小
    CGSize size=[text sizeWithAttributes:@{NSFontAttributeName:font}];
    rect.size=size;
    return rect;
}

//根据字幕整个编辑视图的区域
- (CGRect)calTextViewRectFromSubtitleRect:(CGRect)subtitleRect
{
    CGRect rect = subtitleRect;
    rect.origin.x -= controlSize/2;
    rect.origin.y -= controlSize/2;
    rect.size.width += controlSize;
    rect.size.height += controlSize;
    return rect;
}
@end
